syntax = "proto3";

option go_package = "github.com/AllenShaw19/raft/transport/proto";

service Raft {
  rpc AppendEntriesPipeline(stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc TimeoutNow(TimeoutNowRequest) returns (TimeoutNowResponse) {}
  rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}

message RPCHeader {
  int64 protocol_version = 1;
}

message Log {
  enum LogType {
    LOG_COMMAND = 0;
    LOG_NOOP = 1;
    LOG_ADD_PEER_DEPRECATED = 2;
    LOG_REMOVE_PEER_DEPRECATED = 3;
    LOG_BARRIER = 4;
    LOG_CONFIGURATION = 5;
  }
  uint64 index = 1;
  uint64 term = 2;
  LogType type = 3;
  bytes data = 4;
  bytes extensions = 5;
}

message AppendEntriesRequest {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  bytes leader = 3;
  uint64 prev_log_entry = 4;
  uint64 prev_log_term = 5;
  repeated Log entries = 6;
  uint64 leader_commit_index = 7;
}

message AppendEntriesResponse {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  uint64 last_log = 3;
  bool success = 4;
  bool no_retry_backoff = 5;
}

message RequestVoteRequest {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  bytes candidate = 3;
  uint64 last_log_index = 4;
  uint64 last_log_term = 5;
  bool leadership_transfer = 6;
}

message RequestVoteResponse {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  bytes peers = 3;
  bool granted = 4;
}

message TimeoutNowRequest {
  RPCHeader rpc_header = 1;
}

message TimeoutNowResponse {
  RPCHeader rpc_header = 1;
}

// The first InstallSnapshotRequest on the stream contains all the metadata.
// All further messages contain only data.
message InstallSnapshotRequest {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  bytes leader = 3;
  uint64 last_log_index = 4;
  uint64 last_log_term = 5;
  bytes peers = 6;
  bytes configuration = 7;
  uint64 configuration_index = 8;
  int64 size = 9;

  bytes data = 10;
}

message InstallSnapshotResponse {
  RPCHeader rpc_header = 1;
  uint64 term = 2;
  bool success = 3;
}